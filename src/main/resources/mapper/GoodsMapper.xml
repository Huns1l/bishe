<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.api_project.mapper.GoodsMapper">

    <resultMap type="com.example.api_project.pojo.Goods" id="GoodsMap">
        <result property="goodsKey" column="goods_key" jdbcType="VARCHAR"/>
        <result property="brandCode" column="brand_code" jdbcType="VARCHAR"/>
        <result property="goodsName" column="goods_name" jdbcType="VARCHAR"/>
        <result property="modelCode" column="model_code" jdbcType="VARCHAR"/>
        <result property="goodsCode" column="goods_code" jdbcType="VARCHAR"/>
        <result property="goodsUnit" column="goods_unit" jdbcType="VARCHAR"/>
        <result property="inventoryKey" column="inventory_key" jdbcType="VARCHAR"/>
        <result property="priceCostAverage" column="price_cost_average" jdbcType="VARCHAR"/>
        <result property="priceCostPreset" column="price_cost_preset" jdbcType="VARCHAR"/>
        <result property="priceCostReference" column="price_cost_reference" jdbcType="VARCHAR"/>
        <result property="priceLatestPurchase" column="price_latest_purchase" jdbcType="VARCHAR"/>
        <result property="goodsBarcode" column="goods_barcode" jdbcType="VARCHAR"/>
        <result property="createTime" column="create_time" jdbcType="VARCHAR"/>
        <result property="state" column="state" jdbcType="VARCHAR"/>
        <result property="categoryKey" column="category_key" jdbcType="VARCHAR"/>
        <result property="unitDescription" column="unit_description" jdbcType="VARCHAR"/>
        <result property="weight" column="weight" jdbcType="INTEGER"/>
        <result property="volume" column="volume" jdbcType="INTEGER"/>
        <result property="supplierKey" column="supplier_key" jdbcType="VARCHAR"/>
        <result property="unitType" column="unit_type" jdbcType="VARCHAR"/>
        <result property="inventoryBook" column="inventory_book" jdbcType="INTEGER"/>
        <result property="priceRetail" column="price_retail" jdbcType="INTEGER"/>
        <result property="priceWholesaler" column="price_wholesaler" jdbcType="INTEGER"/>
    </resultMap>

    <!--查询所有-->
    <select id="getListPage" resultMap="GoodsMap">
        select goods_key,
               brand_code,
               goods_name,
               model_code,
               goods_code,
               goods_unit,
               inventory_key,
               price_cost_average,
               price_cost_preset,
               price_cost_reference,
               price_latest_purchase,
               goods_barcode,
               create_time,
               state,
               category_key,
               unit_description,
               weight,
               volume,
               supplier_key,
               unit_type,
               inventory_key,
               price_retail,
               price_wholesaler
        from goods
        order by goods_key desc
        limit #{startRows,jdbcType=INTEGER}, #{pageSize,jdbcType=INTEGER}
    </select>

    <!--查询单个-->
    <select id="queryById" resultMap="GoodsMap">
        select goods_key,
               brand_code,
               goods_name,
               model_code,
               goods_code,
               goods_unit,
               inventory_key,
               price_cost_average,
               price_cost_preset,
               price_cost_reference,
               price_latest_purchase,
               goods_barcode,
               create_time,
               state,
               category_key,
               unit_description,
               weight,
               volume,
               supplier_key,
               unit_type,
               inventory_key,
               price_retail,
               price_wholesaler
        from goods
        where goods_key = #{goodsKey}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="GoodsMap">
        select
        goods_key, brand_code,goods_name, model_code, goods_code, goods_unit, inventory_key, price_cost_average, price_cost_preset,
        price_cost_reference, price_latest_purchase, goods_barcode, create_time, state, category_key, unit_description,
        weight, volume, supplier_key, unit_type, inventory_book, price_retail, price_wholesaler
        from goods
        <where>
            <if test="goodsName != null and goodsName != ''">
                and goods_name like concat('%', #{goodsName}, '%')
            </if>
            <if test="categoryKey != null and categoryKey != ''">
                and category_key = #{categoryKey}
            </if>
        </where>
        limit #{startRows,jdbcType=INTEGER}, #{pageSize,jdbcType=INTEGER}
    </select>

    <!--统计总行数-->
    <select id="count" resultType="java.lang.Long">
        select count(1)
        from goods
        <where>
            <if test="goodsKey != null and goodsKey != ''">
                and goods_key = #{goodsKey}
            </if>
            <if test="brandCode != null and brandCode != ''">
                and brand_code = #{brandCode}
            </if>
            <if test="goodsName != null and goodsName != ''">
                and goods_name = #{goodsName}
            </if>
            <if test="modelCode != null and modelCode != ''">
                and model_code = #{modelCode}
            </if>
            <if test="goodsCode != null and goodsCode != ''">
                and goods_code = #{goodsCode}
            </if>
            <if test="goodsUnit != null and goodsUnit != ''">
                and goods_unit = #{goodsUnit}
            </if>
            <if test="inventoryKey != null and inventoryKey != ''">
                and inventory_key = #{inventoryKey}
            </if>
            <if test="priceCostAverage != null and priceCostAverage != ''">
                and price_cost_average = #{priceCostAverage}
            </if>
            <if test="priceCostPreset != null and priceCostPreset != ''">
                and price_cost_preset = #{priceCostPreset}
            </if>
            <if test="priceCostReference != null and priceCostReference != ''">
                and price_cost_reference = #{priceCostReference}
            </if>
            <if test="priceLatestPurchase != null and priceLatestPurchase != ''">
                and price_latest_purchase = #{priceLatestPurchase}
            </if>
            <if test="goodsBarcode != null and goodsBarcode != ''">
                and goods_barcode = #{goodsBarcode}
            </if>
            <if test="createTime != null and createTime != ''">
                and create_time = #{createTime}
            </if>
            <if test="state != null and state != ''">
                and state = #{state}
            </if>
            <if test="categoryKey != null and categoryKey != ''">
                and category_key = #{categoryKey}
            </if>
            <if test="unitDescription != null and unitDescription != ''">
                and unit_description = #{unitDescription}
            </if>
            <if test="weight != null">
                and weight = #{weight}
            </if>
            <if test="volume != null">
                and volume = #{volume}
            </if>
            <if test="supplierKey != null and supplierKey != ''">
                and supplier_key = #{supplierKey}
            </if>
            <if test="unitType != null and unitType != ''">
                and unit_type = #{unitType}
            </if>
            <if test="inventoryBook != null">
                and inventory_book = #{inventoryBook}
            </if>
            <if test="priceRetail != null">
                and price_retail = #{priceRetail}
            </if>
            <if test="priceWholesaler != null">
                and price_wholesaler = #{priceWholesaler}
            </if>
        </where>
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="goodsKey" useGeneratedKeys="true">
        insert into goods(goods_key,brand_code,goods_name, model_code, goods_code, goods_unit, inventory_key, price_cost_average,
                          price_cost_preset, price_cost_reference, price_latest_purchase, goods_barcode, create_time,
                          state, category_key, unit_description, weight, volume, supplier_key, unit_type,
                          inventory_book, price_retail, price_wholesaler)
        values (#{goodsKey},#{brandCode},#{goodsName}, #{modelCode}, #{goodsCode}, #{goodsUnit}, #{inventoryKey}, #{priceCostAverage},
                #{priceCostPreset}, #{priceCostReference}, #{priceLatestPurchase}, #{goodsBarcode}, #{createTime},
                #{state}, #{categoryKey}, #{unitDescription}, #{weight}, #{volume}, #{supplierKey}, #{unitType},
                #{inventoryBook}, #{priceRetail}, #{priceWholesaler})
    </insert>

    <insert id="insertBatch" keyProperty="goodsKey" useGeneratedKeys="true">
        insert into goods(goods_name,brand_code, model_code, goods_code, goods_unit, inventory_key, price_cost_average,
        price_cost_preset, price_cost_reference, price_latest_purchase, goods_barcode, create_time, state, category_key,
        unit_description, weight, volume, supplier_key, unit_type, inventory_book, price_retail, price_wholesaler)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.goodsName},#{entity.brandCode},  #{entity.modelCode}, #{entity.goodsCode}, #{entity.goodsUnit}, #{entity.inventoryKey},
            #{entity.priceCostAverage}, #{entity.priceCostPreset}, #{entity.priceCostReference},
            #{entity.priceLatestPurchase}, #{entity.goodsBarcode}, #{entity.createTime}, #{entity.state},
            #{entity.categoryKey}, #{entity.unitDescription}, #{entity.weight}, #{entity.volume}, #{entity.supplierKey},
            #{entity.unitType}, #{entity.inventoryBook}, #{entity.priceRetail}, #{entity.priceWholesaler})
        </foreach>
    </insert>

    <insert id="insertOrUpdateBatch" keyProperty="goodsKey" useGeneratedKeys="true">
        insert into goods(goods_name, brand_code,model_code, goods_code, goods_unit, inventory_key, price_cost_average,
        price_cost_preset, price_cost_reference, price_latest_purchase, goods_barcode, create_time, state, category_key,
        unit_description, weight, volume, supplier_key, unit_type, inventory_book, price_retail, price_wholesaler)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.goodsName},#{entity.brandCode},  #{entity.modelCode}, #{entity.goodsCode}, #{entity.goodsUnit}, #{entity.inventoryKey},
            #{entity.priceCostAverage}, #{entity.priceCostPreset}, #{pentity.riceCostReference},
            #{entity.priceLatestPurchase}, #{entity.goodsBarcode}, #{entity.createTime}, #{entity.state},
            #{entity.categoryKey}, #{entity.unitDescription}, #{entity.weight}, #{vvolume}, #{entity.supplierKey},
            #{vunitType}, #{entity.inventoryBook}, #{entity.priceRetail}, #{entity.priceWholesaler})
        </foreach>
        on duplicate key update
        brand_code = values(brand_code),
        goods_name = values(goods_name),
        model_code = values(model_code),
        goods_code = values(goods_code),
        goods_unit = values(goods_unit),
        inventory_key = values(inventory_key),
        price_cost_average = values(price_cost_average),
        price_cost_preset = values(price_cost_preset),
        price_cost_reference = values(price_cost_reference),
        price_latest_purchase = values(price_latest_purchase),
        goods_barcode = values(goods_barcode),
        create_time = values(create_time),
        state = values(state),
        category_key = values(category_key),
        unit_description = values(unit_description),
        weight = values(weight),
        volume = values(volume),
        supplier_key = values(supplier_key),
        unit_type = values(unit_type),
        inventory_key = values( inventory_key),
        price_retail = values(price_retail),
        price_wholesaler = values(price_wholesaler)
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update goods
        <set>
            <if test="brandCode != null and brandCode != ''">
                brand_code = #{brandCode},
            </if>
            <if test="goodsName != null and goodsName != ''">
                goods_name = #{goodsName},
            </if>
            <if test="modelCode != null and modelCode != ''">
                model_code = #{modelCode},
            </if>
            <if test="goodsCode != null and goodsCode != ''">
                goods_code = #{goodsCode},
            </if>
            <if test="goodsUnit != null and goodsUnit != ''">
                goods_unit = #{goodsUnit},
            </if>
            <if test="inventoryKey != null and inventoryKey != ''">
                inventory_key = #{inventoryKey},
            </if>
            <if test="priceCostAverage != null and priceCostAverage != ''">
                price_cost_average = #{priceCostAverage},
            </if>
            <if test="priceCostPreset != null and priceCostPreset != ''">
                price_cost_preset = #{priceCostPreset},
            </if>
            <if test="priceCostReference != null and priceCostReference != ''">
                price_cost_reference = #{priceCostReference},
            </if>
            <if test="priceLatestPurchase != null and priceLatestPurchase != ''">
                price_latest_purchase = #{priceLatestPurchase},
            </if>
            <if test="goodsBarcode != null and goodsBarcode != ''">
                goods_barcode = #{goodsBarcode},
            </if>
            <if test="createTime != null and createTime != ''">
                create_time = #{createTime},
            </if>
            <if test="state != null and state != ''">
                state = #{state},
            </if>
            <if test="categoryKey != null and categoryKey != ''">
                category_key = #{categoryKey},
            </if>
            <if test="unitDescription != null and unitDescription != ''">
                unit_description = #{unitDescription},
            </if>
            <if test="weight != null">
                weight = #{weight},
            </if>
            <if test="volume != null">
                volume = #{volume},
            </if>
            <if test="supplierKey != null and supplierKey != ''">
                supplier_key = #{supplierKey},
            </if>
            <if test="unitType != null and unitType != ''">
                unit_type = #{unitType},
            </if>
            <if test="inventoryBook != null">
                inventory_book = #{inventoryBook},
            </if>
            <if test="priceRetail != null">
                price_retail = #{priceRetail},
            </if>
            <if test="priceWholesaler != null">
                price_wholesaler = #{priceWholesaler},
            </if>
        </set>
        where goods_key = #{goodsKey}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete
        from goods
        where goods_key = #{goodsKey}
    </delete>

</mapper>

